{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"sav",
				"saveAnnotation"
			],
			[
				"annotation",
				"annotationDisplay"
			],
			[
				"con",
				"controller	AngularJS"
			],
			[
				"annotat",
				"annotation"
			],
			[
				"q",
				"quote"
			],
			[
				"annota",
				"annotation〔argument〕"
			],
			[
				"annot",
				"annotation〔argument〕"
			],
			[
				"s",
				"signin"
			],
			[
				"$root",
				"$rootScope	AngularJS"
			],
			[
				"$",
				"$location	AngularJS"
			],
			[
				"de",
				"delta"
			],
			[
				"wr",
				"write"
			],
			[
				"n",
				"n"
			],
			[
				"pr",
				"private"
			],
			[
				"te",
				"test-express"
			],
			[
				"lo",
				"log"
			],
			[
				"co",
				"container"
			],
			[
				"cons",
				"console"
			],
			[
				"log",
				"logged"
			],
			[
				"c",
				"console"
			],
			[
				"crea",
				"creator"
			],
			[
				"$sc",
				"$scope	AngularJS"
			],
			[
				"se",
				"section	Tag"
			],
			[
				"res",
				"response〔variable〕"
			],
			[
				"t",
				"trees"
			],
			[
				"in",
				"input"
			],
			[
				"f",
				"for	Attr"
			],
			[
				"T",
				"Tree"
			],
			[
				"ng-v",
				"ng-view	AngularJS"
			],
			[
				"m",
				"module	AngularJS"
			],
			[
				"ne",
				"new"
			],
			[
				"U",
				"UserSchema"
			],
			[
				"p",
				"password"
			],
			[
				"r",
				"return"
			],
			[
				"u",
				"user"
			],
			[
				"fu",
				"function"
			],
			[
				"a",
				"app"
			],
			[
				"va",
				"var"
			],
			[
				"P",
				"Post"
			],
			[
				"tr",
				"true"
			],
			[
				"S",
				"String"
			],
			[
				"l",
				"log"
			],
			[
				"fun",
				"function〔keyword〕"
			],
			[
				"User",
				"UserSchema"
			],
			[
				"input",
				"inputString"
			],
			[
				"quest",
				"question_id"
			],
			[
				"Temp",
				"TEMPLATE_DIRS"
			],
			[
				"wait",
				"waitchild"
			],
			[
				"LANG",
				"LANGUAGE_CODE"
			],
			[
				"Sty",
				"STYLE_CHOICES"
			],
			[
				"static",
				"STATICFILES_DIRS"
			],
			[
				"article",
				"Article"
			],
			[
				"x",
				"x"
			],
			[
				"k",
				"k"
			],
			[
				"print",
				"printPrimes"
			],
			[
				"zoom",
				"zoom"
			],
			[
				"new",
				"newelem"
			],
			[
				"value",
				"valueAxes"
			],
			[
				"est",
				"estimated"
			],
			[
				"array",
				"array"
			],
			[
				"extend",
				"extend"
			],
			[
				"w",
				"w"
			],
			[
				"font",
				"font-size"
			],
			[
				"back",
				"background-color"
			],
			[
				"margin",
				"margin-left"
			],
			[
				"backg",
				"background-color"
			],
			[
				"margi",
				"margin-top"
			],
			[
				"inline",
				"inline-block"
			],
			[
				"b",
				"border"
			],
			[
				"marg",
				"margin-top"
			],
			[
				"repe",
				"repeat-y"
			],
			[
				"background",
				"background-color"
			],
			[
				"border",
				"border-radius"
			],
			[
				"lists",
				"list-style-type"
			],
			[
				"list-st",
				"list-style-type"
			],
			[
				"backgr",
				"background-color"
			],
			[
				"preceden",
				"precedenceLevel"
			],
			[
				"precende",
				"precedenceLevel"
			],
			[
				"righ",
				"rightChild"
			],
			[
				"lef",
				"leftChild"
			],
			[
				"i",
				"indexOf"
			],
			[
				"getSt",
				"getStopsSize"
			],
			[
				"origin",
				"originCity"
			],
			[
				"ind",
				"indexOfOriginCity"
			],
			[
				"orig",
				"originCity"
			],
			[
				"ori",
				"originName"
			],
			[
				"left",
				"leftSmall"
			],
			[
				"get",
				"getTotalCost"
			],
			[
				"g",
				"getCost"
			],
			[
				"index",
				"indexOfLastStop"
			],
			[
				"getS",
				"getStops"
			],
			[
				"dest",
				"destination"
			],
			[
				"is",
				"isEmpty"
			],
			[
				"getC",
				"getCost"
			],
			[
				"des",
				"destinationLon"
			],
			[
				"Arra",
				"ArrayList"
			],
			[
				"citie",
				"citiesName"
			],
			[
				"start",
				"startConnections"
			],
			[
				"conn",
				"connection"
			],
			[
				"connection",
				"Connection"
			],
			[
				"last",
				"lastStop"
			],
			[
				"Last",
				"last"
			],
			[
				"las",
				"lastStop"
			],
			[
				"num",
				"numberOfStops"
			],
			[
				"stop",
				"stops"
			],
			[
				"to",
				"toString"
			],
			[
				"old",
				"oldConnections"
			],
			[
				"sta",
				"startDestination"
			],
			[
				"st",
				"string"
			],
			[
				"startC",
				"startCost"
			],
			[
				"the",
				"theQueue"
			],
			[
				"map",
				"map"
			],
			[
				"exten",
				"extendConnection"
			],
			[
				"cit",
				"cities"
			],
			[
				"city",
				"city"
			],
			[
				"long",
				"long"
			],
			[
				"routes",
				"routes"
			],
			[
				"presenta",
				"Presentaion"
			],
			[
				"Ac",
				"ACCESS_TOKEN"
			],
			[
				"length",
				"length"
			],
			[
				"pen",
				"setPenRadius"
			],
			[
				"y",
				"y"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "angular.module('trees').factory('Trees', ['$resource', function($resource) {\n	return $resource (\n		'api/trees/:treeId/',\n		{ treeId: '@_id'},\n		{ update: {method: 'PUT'}});\n}]);\n\nangular.module('trees').factory('Annotations', ['$resource', function($resource) {\n	return $resource (\n		'api/trees/:treeId/annotatener',\n		{ treeId: '@_id'},\n		{ annotate: {method: 'POST'}});\n}]);\n\nangular.module('trees').factory('saveAnnotations', ['$resource', function($resource) {\n    return $resource (\n        'api/trees/:treeId/saveAnnotation',\n        { treeId: '@_id'},\n        { saveAnnotation: {method: 'PUT'}});\n}]);\n\n// directive to render annotation\nangular.module('trees').directive('annotationDisplay', ['annotationFactory', '$timeout', function(annotationFactory, $timeout) {\n	return {\n		restrict: 'EA',\n		scope: {\n			isolatedTree: '@tree',\n		},\n		transclude: true,\n		controller: function($scope, $element) {\n			$scope.$watch('isolatedTree', function (newValue, oldValue) {\n                if (newValue && newValue != oldValue) {\n                    // console.log(\"old\" + oldValue);\n                    // console.log(\"new\" + newValue);\n					var htmlText = annotationFactory.createAnnotationHtml(newValue);\n                    var replacementElement = angular.element(htmlText);\n                    $element.replaceWith(replacementElement);\n                    $element = replacementElement;\n                }\n            });\n		},\n		link: function(scope, element) {\n			if (scope.isolatedTree) {\n				var htmlText = annotationFactory.createAnnotationHtml(isolatedTree);\n				element.replaceWith(htmlText);\n			}\n		}\n	};\n}]);\n\nangular.module('trees').factory('annotationFactory', function() {\n	var factory = {};\n    factory.parseAnnotations = function(tree) {\n        function getNext(treeData) {\n            getNext.count = ++getNext.count || 0;\n            if (treeData[getNext.count][0] === \"NEWSENTENCE\")\n                getNext.count++;\n            return getNext.count;\n        }\n        var div = document.getElementById('annotation');\n        var childNodes = div.childNodes[1].childNodes;\n        var data = tree.data;\n        var treeData = [];\n        d3.tsv.parseRows(data, function(data) {\n            if(data[0])\n                treeData[treeData.length] = data;\n            else {\n                treeData[treeData.length] = [\"NEWSENTENCE\"]; // adds spacer\n            }\n        });\n        var i,k;\n        var words, word;\n        for (i=0; i < childNodes.length; i++) {\n            var node = childNodes[i];\n            if (node.nodeType == 3) {\n                words = node.nodeValue.split(\" \").clean(\"\");\n                for (k=0; k<words.length; k++) {\n                    if (words[k]) {\n                        treeData[getNext(treeData)][9] = \"O\";\n                    }\n                }\n            }\n            if (node.nodeType == 1) {\n                var name;\n                if (node.className.substring(0,4).toUpperCase() === \"MISC\")\n                    name = \"MISC\";\n                else {\n                    name = node.className.substring(0,3).toUpperCase();\n                }\n                words = node.innerHTML.split(\" \").clean(\"\");\n                if (words.length == 1)\n                    treeData[getNext(treeData)][9] = \"U-\" + name;\n                else {\n                    treeData[getNext(treeData)][9] = \"B-\" + name;\n                    for (k=1; k<words.length-1; k++) {\n                        treeData[getNext(treeData)][9] = \"I-\" + name;\n                    }\n                    treeData[getNext(treeData)][9] = \"L-\" + name;\n                }\n            }\n        }\n        var tsv = \"\";\n        for (i=0;i<treeData.length;i++) {\n            if (treeData[i][0] === \"NEWSENTENCE\")\n                tsv+=\"\\n\";\n            else {\n                tsv+=treeData[i][0]+\"\\t\"+treeData[i][1]+\"\\t\"+treeData[i][2]+\"\\t\"+treeData[i][3]+\"\\t\"+treeData[i][4]+\"\\t\"+treeData[i][5]+\"\\t\"+treeData[i][6]+\"\\t\"+treeData[i][7]+\"\\t\"+treeData[i][8]+\"\\t\"+treeData[i][9]+\"\\n\";\n            }\n        }\n        getNext.count = 0;\n        return tsv;\n    };\n	factory.createAnnotationHtml = function(tree) {\n		var tree = JSON.parse(tree);\n		var out = \"<p>\";\n		d3.tsv.parseRows(tree.data, function(data) {\n			if (data[9]) {\n				var NERtag = data[9];\n				if (NERtag === \"O\" || NERtag.charAt(0) === \"I\") \n					out+=\" \" + data[1] + \" \";\n				else if (NERtag === \"U-PER\")\n					out+=' <span class=\"Person\">' + data[1] + \"</span> \";\n				else if (NERtag === \"U-ORG\") \n					out+=' <span class=\"Organization\">' + data[1] + \"</span> \";\n				else if (NERtag === \"U-LOC\")\n					out+=' <span class=\"Location\">' + data[1] + \"</span> \";\n                else if (NERtag === \"U-MISC\")\n                    out+=' <span class=\"MISC\">' + data[1] + \"</span> \";\n				else if (NERtag === \"B-PER\") \n					out+=' <span class=\"Person\">' + data[1] + \" \";\n				else if (NERtag === \"B-ORG\")\n					out+=' <span class=\"Organization\">' + data[1] + \" \";\n				else if (NERtag === \"B-LOC\")\n					out+=' <span class=\"Location\">' + data[1] + \" \";\n                else if (NERtag === \"B-MISC\")\n                    out+=' <span class=\"MISC\">' + data[1] + \"</span> \";\n				else if (NERtag.charAt(0) === \"L\")\n					out+=data[1] + \"</span> \";\n			}\n		});\n		out+='</p>';\n		return out;\n	};\n	return factory;\n});\n\nangular.module('trees').directive('keypressEvents', function($document, $rootScope) {\n    return {\n        restrict: 'A',\n        link: function () {\n            $document.bind('keypress', function (e) {\n                $rootScope.$broadcast('keypress', e, String.fromCharCode(e.which));\n            });\n        }\n    };\n});\n\nfunction removeTag() {\n    var range = window.getSelection().getRangeAt(0);\n    var node = $(range.commonAncestorContainer);\n    if (node.parent().is(\"span\")) {\n        node.unwrap();\n    }\n}",
			"file": "public/trees/services/trees.client.service.js",
			"file_size": 5816,
			"file_write_time": 130744245960000000,
			"settings":
			{
				"buffer_size": 5790,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/views/index.ejs",
			"settings":
			{
				"buffer_size": 2917,
				"line_ending": "Unix"
			}
		},
		{
			"file": "public/trees/controllers/trees.client.controller.js",
			"settings":
			{
				"buffer_size": 3414,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 375.0,
		"last_filter": "pus",
		"selected_items":
		[
			[
				"pus",
				"Git: Push"
			],
			[
				"qui",
				"Git: Quick Commit"
			],
			[
				"pul",
				"Git: Pull"
			],
			[
				"push",
				"Git: Push"
			],
			[
				"qu",
				"Git: Quick Commit"
			],
			[
				"pull",
				"Git: Pull"
			],
			[
				"com",
				"Git: Quick Commit"
			],
			[
				"pu",
				"Git: Push"
			],
			[
				"comm",
				"Git: Quick Commit"
			],
			[
				"q",
				"Git: Quick Commit"
			],
			[
				"commi",
				"Git: Quick Commit"
			],
			[
				"git",
				"Git: Quick Commit"
			],
			[
				"git com",
				"Git: Quick Commit"
			],
			[
				"git co",
				"Git: Quick Commit"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"commit",
				"Git: Commit"
			],
			[
				"git pu",
				"Git: Push"
			],
			[
				"git ad",
				"Git: Quick Add"
			],
			[
				"status",
				"Git: Status"
			],
			[
				"orig",
				"Package Control: Install Package"
			],
			[
				"jav",
				"Set Syntax: Java"
			],
			[
				"i",
				"Package Control: Install Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"java",
				"Set Syntax: JavaScript"
			],
			[
				"angu",
				"Set Syntax: HTML (Angular.js)"
			],
			[
				"Package Controlinstall ",
				"Package Control: Install Package"
			],
			[
				"django",
				"Set Syntax: HTML (Django)"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Discover Packages"
			],
			[
				"packa",
				"Package Control: Add Channel"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"rai",
				"Set Syntax: Ruby on Rails"
			],
			[
				"rub",
				"Set Syntax: Ruby on Rails"
			],
			[
				"m6",
				"Set Syntax: M68k-Assembly"
			],
			[
				"m",
				"Set Syntax: M68k-Assembly"
			],
			[
				"8",
				"Set Syntax: M68k-Assembly"
			],
			[
				"m68",
				"Set Syntax: M68k-Assembly"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 579.0
	},
	"console":
	{
		"height": 120.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/mike/Git/ClearNLP-demo-website",
		"/Users/mike/Git/ClearNLP-demo-website/app",
		"/Users/mike/Git/ClearNLP-demo-website/app/controllers",
		"/Users/mike/Git/ClearNLP-demo-website/app/models",
		"/Users/mike/Git/ClearNLP-demo-website/app/routes",
		"/Users/mike/Git/ClearNLP-demo-website/app/views",
		"/Users/mike/Git/ClearNLP-demo-website/public",
		"/Users/mike/Git/ClearNLP-demo-website/public/js",
		"/Users/mike/Git/ClearNLP-demo-website/public/trees",
		"/Users/mike/Git/ClearNLP-demo-website/public/trees/controllers",
		"/Users/mike/Git/ClearNLP-demo-website/public/trees/services"
	],
	"file_history":
	[
		"/Users/mike/Git/ClearNLP-demo-website/public/js/rangyConfig.js",
		"/Users/mike/Git/ClearNLP-demo-website/node_modules/browserify/node_modules/module-deps/node_modules/detective/node_modules/acorn/test/compare/traceur.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/css/rangy.css",
		"/Users/mike/Git/ClearNLP-demo-website/app/controllers/trees.server.controller.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/trees/controllers/trees.client.controller.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/trees/services/trees.client.service.js",
		"/Users/mike/Git/ClearNLP-demo-website/app/routes/trees.server.routes.js",
		"/Users/mike/Desktop/articles/technology/20150101_In With the New: Snappy Apps for 2015 - NYTimes.com",
		"/Users/mike/Git/ClearNLP-demo-website/public/trees/views/view-tree.client.view.html",
		"/Users/mike/Git/ClearNLP-demo-website/README.md",
		"/Users/mike/Git/ClearNLP-demo-website/cn-online/src/main/java/edu/emory/clir/clearnlp/clearviz/SparkApi.java",
		"/Users/mike/Git/ClearNLP-demo-website/server.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/trees/config/trees.client.routes.js",
		"/Users/mike/Git/ClearNLP-demo-website/.git/COMMIT_EDITMSG",
		"/Users/mike/Git/ClearNLP-demo-website/app/tests/trees.server.model.tests.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/components/rangy-1.3/rangy-classapplier.js",
		"/Users/mike/Git/ClearNLP-demo-website/.git/MERGE_MSG",
		"/Users/mike/Git/ClearNLP-demo-website/package.json",
		"/Users/mike/Git/ClearNLP-demo-website/.gitignore",
		"/Users/mike/Git/ClearNLP-demo-website/public/application.js",
		"/Users/mike/Git/ClearNLP-demo-website/app/views/index.ejs",
		"/Users/mike/Git/ClearNLP-demo-website/public/dependency_guidelines.md",
		"/Users/mike/Git/ClearNLP-demo-website/bower.json",
		"/Users/mike/Git/ClearNLP-demo-website/public/components/rangy-1.3/uncompressed/rangy-highlighter.js",
		"/Users/mike/Git/ClearNLP-demo-website/app/models/tree.server.model.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/trees/views/list-tree.client.view.html",
		"/Users/mike/Git/ClearNLP-demo-website/public/js/clearnlp_demo.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/css/landing-page.css",
		"/Users/mike/Git/ClearNLP-demo-website/public/signin/controllers/signin.client.controller.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/misc/directives.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/trees/trees.client.module.js",
		"/Users/mike/Git/ClearNLP-demo-website/app/tests/trees.server.controller.tests.js",
		"/Users/mike/Downloads/d3/d3.min.js",
		"/Users/mike/Git/ClearNLP-demo-website/app/controllers/ner.server.controller.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/components/rangy-1.3/uncompressed/rangy-cssclassapplier.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/components/rangy-1.3/uncompressed/rangy-core.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/components/quill/README.md",
		"/Users/mike/Git/ClearNLP-demo-website/public/components/quill/LICENSE",
		"/Users/mike/Git/ClearNLP-demo-website/public/components/angular-annotator/src/NER-plugin.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/components/angular-annotator/src/angular-annotator.js",
		"/Users/mike/Git/ClearNLP-demo-website/node_modules/body-parser/README.md",
		"/Users/mike/.zshrc",
		"/Users/mike/.vimrc",
		"/Users/mike/Git/ClearNLP-demo-website/clearviz.sublime-project",
		"/Users/mike/Git/ClearNLP-demo-website/node_modules/bower/node_modules/fstream-ignore/ignore.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/signin/signin.client.module.js",
		"/Users/mike/Library/Application Support/Sublime Text 3/Packages/Origami/Default (OSX).sublime-keymap",
		"/Users/mike/Library/Application Support/Sublime Text 3/Packages/Origami/Origami.sublime-settings",
		"/Users/mike/Git/ClearNLP-demo-website/public/trees/controllers/trees.annotator.controller.js",
		"/Users/mike/Git/ClearNLP-demo-website/app/routes/users.server.routes.js",
		"/Users/mike/Git/ClearNLP-demo-website/app/controllers/users.server.controller.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/signin/views/signin.client.view.html",
		"/Users/mike/Git/ClearNLP-demo-website/node_modules/passport/lib/http/request.js",
		"/Users/mike/Git/ClearNLP-demo-website/config/passport.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/js/bootstrap.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/css/annotator.css",
		"/Users/mike/Git/ClearNLP-demo-website/public/js/annotator-full.min.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/js/annotator.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/css/jquery-ui.css",
		"/Users/mike/Git/ClearNLP-demo-website/public/components/angular-annotator/README.md",
		"/Users/mike/Downloads/jquery-ui-1.11.4.custom/jquery-ui.min.css",
		"/Users/mike/Git/ClearNLP-demo-website/public/users/services/authentication.client.service.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/js/jquery_functions.js",
		"/Users/mike/Downloads/annotator-full.1.2.7/annotator.min.css",
		"/Users/mike/Git/clearnlp-sa/.git/COMMIT_EDITMSG",
		"/Users/mike/scripts/motd.sh",
		"/Users/mike/Desktop/k/ECC.java",
		"/Users/mike/Downloads/BetterOffDead.java",
		"/Users/mike/Desktop/k/FSMtoProg.java",
		"/Users/mike/Downloads/Save.java",
		"/Users/mike/Git/ClearNLP-demo-website/karma.conf.js",
		"/Users/mike/Git/ClearNLP-demo-website/config/express.js",
		"/Users/mike/Git/ClearNLP-demo-website/app/routes/index.server.routes.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/components/angular-cookies/README.md",
		"/Users/mike/Git/ClearNLP-demo-website/public/components/angular-cookies/index.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/trees/views/edit-tree.client.view.html",
		"/Users/mike/Git/ClearNLP-demo-website/public/css/clearnlp_demo.css",
		"/Users/mike/Git/ClearNLP-demo-website/public/font-awesome/css/font-awesome.min.css",
		"/Users/mike/Git/ClearNLP-demo-website/app/views/index.html",
		"/Users/mike/Git/ClearNLP-demo-website/public/trees/tests/unit/trees.client.service.unit.tests.js",
		"/Users/mike/Desktop/a.txt",
		"/Users/mike/Git/ClearNLP-demo-website/public/trees/views/create-tree.client.view.html",
		"/Users/mike/Git/ClearNLP-demo-website/app/models/user.server.model.js",
		"/Users/mike/Git/ClearNLP-demo-website/node_modules/karma/node_modules/log4js/test/gelfAppender-test.js.orig",
		"/Users/mike/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/mike/Git/ClearNLP-demo-website/public/trees/tests/unit/trees.client.controller.unit.tests.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/signin/config/signin.client.routes.js",
		"/Users/mike/Git/ClearNLP-demo-website/node_modules/karma/node_modules/socket.io/node_modules/socket.io-client/node_modules/uglify-js/tmp/app.js",
		"/Users/mike/Git/ClearNLP-demo-website/app/controllers/index.server.controller.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/signin/controllers/mymodal.client.controller.js",
		"/Users/mike/.Trash/index.server.routes.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/components/angular/angular.js",
		"/Users/mike/.bash_profile",
		"/Users/mike/Git/ClearNLP-demo-website/app/views/signup.html",
		"/Users/mike/Git/ClearNLP-demo-website/public/example/views/example.client.view.html",
		"/Users/mike/Git/ClearNLP-demo-website/public/users/config/users.client.routes.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/example/config/signin.client.routes.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/example/views/signin.client.view.html",
		"/Users/mike/Git/ClearNLP-demo-website/public/users/views/signin.client.view.html",
		"/Users/mike/Git/ClearNLP-demo-website/node_modules/connect-mongo/node_modules/mongodb/Readme.md",
		"/Users/mike/Git/ClearNLP-demo-website/public/components/bootstrap/dist/css/bootstrap.css",
		"/Users/mike/Git/ClearNLP-demo-website/node_modules/bower/node_modules/bower-registry-client/node_modules/request/node_modules/hawk/test/browser.js",
		"/Users/mike/Git/ClearNLP-demo-website/app/views/signup.ejs",
		"/Users/mike/Git/ClearNLP-demo-website/node_modules/karma/node_modules/socket.io/node_modules/socket.io-client/node_modules/active-x-obfuscator/node_modules/zeparser/benchmark.html",
		"/Users/mike/Git/ClearNLP-demo-website/public/ui bootstrap/uibootstrap.client.module.js",
		"/Users/mike/Git/ClearNLP-demo-website/app/views/signin.ejs",
		"/Users/mike/Git/ClearNLP-demo-website/public/.bowerrc",
		"/Users/mike/Git/ClearNLP-demo-website/bower_components/angular-bootstrap/ui-bootstrap-tpls.min.js",
		"/Users/mike/Git/ClearNLP-demo-website/public/css/bootstrap.css",
		"/Users/mike/Git/ClearNLP-demo-website/public/js/clearnlp-demo.js",
		"/Users/mike/Desktop/mean/app/controllers/trees.server.controller.js",
		"/Users/mike/Desktop/mean/public/trees/views/edit-tree.client.view.html",
		"/Users/mike/Desktop/mean/public/trees/views/list-tree.client.view.html",
		"/Users/mike/Desktop/mean/public/trees/views/view-tree.client.view.html",
		"/Users/mike/Desktop/mean/app/models/user.server.model.js",
		"/Users/mike/Downloads/Introduction-to-the-Theory-of-Computation-Solutions-master/README.md",
		"/Users/mike/Desktop/mean/server.js",
		"/Users/mike/Desktop/mean/app/routes/trees.server.routes.js",
		"/Users/mike/Desktop/mean/public/trees/config/trees.client.routes.js",
		"/Users/mike/Desktop/mean/app/views/index.ejs",
		"/Users/mike/Desktop/mean/node_modules/compression/node_modules/debug/node.js",
		"/Users/mike/Desktop/mean/public/example/views/example.client.view.html",
		"/Users/mike/Desktop/mean/public/example/controllers/example.client.controller.js",
		"/Users/mike/Desktop/mean/app/models/trees.server.routes.js",
		"/Users/mike/Desktop/mean/public/trees/services/trees.client.service.js",
		"/Users/mike/Desktop/mean/app/controllers/index.server.controller.js",
		"/Users/mike/Desktop/mean/public/application.js",
		"/Users/mike/Desktop/mean/public/trees/trees.client.module.js"
	],
	"find":
	{
		"height": 37.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/Users/mike/Git/ClearNLP-demo-website/",
			"/Users/mike/Git/ClearNLP-demo-website/public/js",
			"/Users/mike/Git/ClearNLP-demo-website/",
			"/Users/mike/Git/ClearNLP-demo-website/public",
			"/Users/mike/Git/ClearNLP-demo-website/public/trees",
			"-/Users/mike/Git/ClearNLP-demo-website/node_modules, -/Users/mike/Git/ClearNLP-demo-website/public/components, ,<open folders>",
			"-/Users/mike/Git/ClearNLP-demo-website/node_modules, -/Users/mike/Git/ClearNLP-demo-website/public/components",
			"-/Users/mike/Git/ClearNLP-demo-website/node_modules, -,/Users/mike/Git/ClearNLP-demo-website/public/components",
			"",
			"/Users/mike/Git/ClearNLP-demo-website/public/trees",
			"",
			"/Users/mike/Git/ClearNLP-demo-website",
			"/Users/mike/Git/ClearNLP-demo-website/public",
			"/Users/mike/Git/ClearNLP-demo-website/",
			"/Users/mike/Git/ClearNLP-demo-website/, -*/Users/mike/Git/ClearNLP-demo-website/node-modules/",
			"/Users/mike/Git/ClearNLP-demo-website/, -*/Users/mike/Git/ClearNLP-demo-website/node-modules",
			"/Users/mike/Git/ClearNLP-demo-website/,-*/Users/mike/Git/ClearNLP-demo-website/node-modules",
			"/Users/mike/Git/ClearNLP-demo-website/,,-*/Users/mike/Git/ClearNLP-demo-website/node-modules",
			"",
			"/Users/mike/Git/ClearNLP-demo-website/",
			"/Users/mike/Git/ClearNLP-demo-website/,/Users/mike/Git/ClearNLP-demo-website/public/users",
			"/Users/mike/Git/ClearNLP-demo-website/",
			"/Users/mike/Git/ClearNLP-demo-website/public/components",
			"/Users/mike/Git/ClearNLP-demo-website",
			"/Users/mike/Desktop/mean/",
			"/Users/mike/Desktop/mean/public/img",
			"",
			"/Users/Mike/Desktop/Orders",
			"/User/Mike/Desktop/Orders",
			"",
			".nav",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"highlightOrganization",
			"keypress",
			"parseAnnotations",
			"for",
			"createAnnotationHtml",
			"new",
			"createAnnotationHtml",
			"I-",
			"ryan",
			"[7",
			"console.log",
			":4567",
			".106",
			"removeTag",
			"bodyParser",
			"require(\"body-parser\");",
			"elementTagName",
			"defaultTagName",
			"span",
			"edit",
			"tsv",
			"getRange",
			"unapply",
			"removeHighlights",
			"unhighlightSelection",
			"drawDEPTree",
			"clickPrevious",
			"signinModal",
			"</br>",
			"send",
			"annotations",
			"content",
			"modal-backdrop",
			".concat(",
			"srl",
			"initSRL",
			"Annotations",
			"$save",
			"classAppliers",
			"highlightSelection",
			"highlight",
			"summary",
			"note",
			"highlightCharacterRanges",
			"this.annotator",
			"/api",
			"app.use(",
			"content.annotator",
			"$scope.",
			"Trees",
			"NERpl",
			"$promise",
			"$http",
			"Trees",
			"$http.post",
			"$http",
			"treeId",
			"signout",
			"isAuthenticated",
			"signout",
			"requiresLogin",
			"isAuthenticated",
			"logOut()",
			"logOut",
			"loggedIn",
			"annotator-hl",
			"index",
			".ui-menu",
			"autocom",
			"results",
			".jpg",
			"annotator-plugins",
			"annotatorTags",
			"<a href",
			"<a",
			"href",
			"filterOptions",
			"mwAnnotator",
			"Trees",
			"$cookieStore",
			"mw-annotator",
			"angularcookies",
			"angular-cookies",
			"cookies",
			"signin",
			" window.user",
			"\");",
			"writer.write(",
			"System.out.println(",
			"karma.conf.js",
			"../",
			"proxyrequire",
			"ngCookies",
			"font-awesome",
			"<li><a href=\"#!/trees\">Trees</a>",
			"<<<<<",
			">>>>>",
			"<<<<<<< HEAD",
			"HEAD",
			">>>>>>> dev",
			"head",
			"#!",
			"signin.client.v",
			"promise",
			"signout",
			"create",
			"checkLoggedin",
			".when",
			"when",
			"checkLoggedin",
			"signout",
			"deptree",
			"$q",
			"/trees",
			"trees",
			"console",
			"Password should be at least 5 characters long",
			"signupModal",
			"passport.deserializeUser",
			"message",
			"Username already exists",
			"/trees",
			"users",
			"/app/routes/index.server.routes.js",
			"ind",
			"/trees",
			"trees",
			"conso"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"<br>",
			"+=",
			"writer.write(",
			"<li ng-show=\"loggedIn\"><a href=\"#!/trees\">Trees</a>",
			"signin",
			"tree",
			"trees",
			"tree",
			"now",
			"\\'",
			"\"",
			"Hédo",
			".navbar",
			".nav",
			"\"",
			"theS.add(0, ",
			"theS.get(theS.size()-1)",
			"get(0)",
			"theQ",
			"theS",
			"getStopsSize",
			"read",
			"data",
			"radius",
			"region",
			"GBA"
		],
		"reverse": false,
		"show_context": false,
		"use_buffer2": false,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "public/trees/services/trees.client.service.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5790,
						"regions":
						{
						},
						"selection":
						[
							[
								5790,
								5790
							]
						],
						"settings":
						{
							"WordCountShouldRun": false,
							"WordCountSyntax": "javascript",
							"apply_syntax_touched": true,
							"auto_complete": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2199.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "app/views/index.ejs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2917,
						"regions":
						{
						},
						"selection":
						[
							[
								1371,
								1371
							]
						],
						"settings":
						{
							"WordCountShouldRun": true,
							"WordCountSyntax": "html",
							"apply_syntax_touched": true,
							"auto_complete": false,
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 416.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "public/trees/controllers/trees.client.controller.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3414,
						"regions":
						{
						},
						"selection":
						[
							[
								3048,
								3048
							]
						],
						"settings":
						{
							"WordCountShouldRun": false,
							"WordCountSyntax": "javascript",
							"apply_syntax_touched": true,
							"auto_complete": false,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1227.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 258.0
	},
	"output.git-commit":
	{
		"height": 120.0
	},
	"output.git-pull":
	{
		"height": 120.0
	},
	"output.git-push":
	{
		"height": 120.0
	},
	"pinned_build_system": "",
	"project": "clearviz.sublime-project",
	"replace":
	{
		"height": 66.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ignore",
				"node_modules/bower/node_modules/fstream-ignore/ignore.js"
			],
			[
				"p",
				"/private/var/folders/cd/18gvtyb10nl39yr_f59xz5jm0000gn/T/3516ed28-d5b4-47f4-b79c-18f0f561ef70/home/mzhai2/cs255/project4/pj4.s"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 375.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 786.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 270.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 1
	}
}
